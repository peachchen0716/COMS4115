; ModuleID = 'Pyni'
source_filename = "Pyni"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.6 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.7 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.8 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.9 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.10 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.11 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.12 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.13 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.14 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.15 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.16 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.17 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.18 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.19 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.20 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.21 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.22 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.23 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.24 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.25 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.26 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.27 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.28 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.29 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.30 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.31 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.32 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.33 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.34 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.35 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.36 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.37 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.38 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.39 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.40 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.41 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.42 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @printf(i8*, ...)

define i1 @list_getbool({ i32*, i1* }* %0, i32 %1) {
entry:
  %list_ptr_alloc = alloca { i32*, i1* }*
  store { i32*, i1* }* %0, { i32*, i1* }** %list_ptr_alloc
  %idx_alloc = alloca i32
  store i32 %1, i32* %idx_alloc
  %list_load = load { i32*, i1* }*, { i32*, i1* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i1* }, { i32*, i1* }* %list_load, i32 0, i32 1
  %array_load = load i1*, i1** %list_array_ptr
  %idx_load = load i32, i32* %idx_alloc
  %list_arry_element_ptr = getelementptr i1, i1* %array_load, i32 %idx_load
  %list_array_element_ptr = load i1, i1* %list_arry_element_ptr
  ret i1 %list_array_element_ptr
}

define i32 @list_getint({ i32*, i32* }* %0, i32 %1) {
entry:
  %list_ptr_alloc = alloca { i32*, i32* }*
  store { i32*, i32* }* %0, { i32*, i32* }** %list_ptr_alloc
  %idx_alloc = alloca i32
  store i32 %1, i32* %idx_alloc
  %list_load = load { i32*, i32* }*, { i32*, i32* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i32* }, { i32*, i32* }* %list_load, i32 0, i32 1
  %array_load = load i32*, i32** %list_array_ptr
  %idx_load = load i32, i32* %idx_alloc
  %list_arry_element_ptr = getelementptr i32, i32* %array_load, i32 %idx_load
  %list_array_element_ptr = load i32, i32* %list_arry_element_ptr
  ret i32 %list_array_element_ptr
}

define double @list_getfloat({ i32*, double* }* %0, i32 %1) {
entry:
  %list_ptr_alloc = alloca { i32*, double* }*
  store { i32*, double* }* %0, { i32*, double* }** %list_ptr_alloc
  %idx_alloc = alloca i32
  store i32 %1, i32* %idx_alloc
  %list_load = load { i32*, double* }*, { i32*, double* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, double* }, { i32*, double* }* %list_load, i32 0, i32 1
  %array_load = load double*, double** %list_array_ptr
  %idx_load = load i32, i32* %idx_alloc
  %list_arry_element_ptr = getelementptr double, double* %array_load, i32 %idx_load
  %list_array_element_ptr = load double, double* %list_arry_element_ptr
  ret double %list_array_element_ptr
}

define i8* @list_getstr({ i32*, i8** }* %0, i32 %1) {
entry:
  %list_ptr_alloc = alloca { i32*, i8** }*
  store { i32*, i8** }* %0, { i32*, i8** }** %list_ptr_alloc
  %idx_alloc = alloca i32
  store i32 %1, i32* %idx_alloc
  %list_load = load { i32*, i8** }*, { i32*, i8** }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i8** }, { i32*, i8** }* %list_load, i32 0, i32 1
  %array_load = load i8**, i8*** %list_array_ptr
  %idx_load = load i32, i32* %idx_alloc
  %list_arry_element_ptr = getelementptr i8*, i8** %array_load, i32 %idx_load
  %list_array_element_ptr = load i8*, i8** %list_arry_element_ptr
  ret i8* %list_array_element_ptr
}

define i32 @list_sizebool({ i32*, i1* }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, i1* }*
  store { i32*, i1* }* %0, { i32*, i1* }** %list_ptr_alloc
  %list_load = load { i32*, i1* }*, { i32*, i1* }** %list_ptr_alloc
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i1* }, { i32*, i1* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  ret i32 %list_size
}

define i32 @list_sizeint({ i32*, i32* }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, i32* }*
  store { i32*, i32* }* %0, { i32*, i32* }** %list_ptr_alloc
  %list_load = load { i32*, i32* }*, { i32*, i32* }** %list_ptr_alloc
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i32* }, { i32*, i32* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  ret i32 %list_size
}

define i32 @list_sizefloat({ i32*, double* }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, double* }*
  store { i32*, double* }* %0, { i32*, double* }** %list_ptr_alloc
  %list_load = load { i32*, double* }*, { i32*, double* }** %list_ptr_alloc
  %list_size_ptr_ptr = getelementptr inbounds { i32*, double* }, { i32*, double* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  ret i32 %list_size
}

define i32 @list_sizestr({ i32*, i8** }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, i8** }*
  store { i32*, i8** }* %0, { i32*, i8** }** %list_ptr_alloc
  %list_load = load { i32*, i8** }*, { i32*, i8** }** %list_ptr_alloc
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i8** }, { i32*, i8** }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  ret i32 %list_size
}

define void @list_pushbool({ i32*, i1* }* %0, i1 %1) {
entry:
  %list_ptr_alloc = alloca { i32*, i1* }*
  store { i32*, i1* }* %0, { i32*, i1* }** %list_ptr_alloc
  %val_alloc = alloca i1
  store i1 %1, i1* %val_alloc
  %list_load = load { i32*, i1* }*, { i32*, i1* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i1* }, { i32*, i1* }* %list_load, i32 0, i32 1
  %list_array_load = load i1*, i1** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i1* }, { i32*, i1* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %list_arry_next_element_ptr = getelementptr i1, i1* %list_array_load, i32 %list_size
  %inc_size = add i32 %list_size, 1
  store i32 %inc_size, i32* %list_size_ptr
  %val = load i1, i1* %val_alloc
  store i1 %val, i1* %list_arry_next_element_ptr
  ret void
}

define void @list_pushint({ i32*, i32* }* %0, i32 %1) {
entry:
  %list_ptr_alloc = alloca { i32*, i32* }*
  store { i32*, i32* }* %0, { i32*, i32* }** %list_ptr_alloc
  %val_alloc = alloca i32
  store i32 %1, i32* %val_alloc
  %list_load = load { i32*, i32* }*, { i32*, i32* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i32* }, { i32*, i32* }* %list_load, i32 0, i32 1
  %list_array_load = load i32*, i32** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i32* }, { i32*, i32* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %list_arry_next_element_ptr = getelementptr i32, i32* %list_array_load, i32 %list_size
  %inc_size = add i32 %list_size, 1
  store i32 %inc_size, i32* %list_size_ptr
  %val = load i32, i32* %val_alloc
  store i32 %val, i32* %list_arry_next_element_ptr
  ret void
}

define void @list_pushfloat({ i32*, double* }* %0, double %1) {
entry:
  %list_ptr_alloc = alloca { i32*, double* }*
  store { i32*, double* }* %0, { i32*, double* }** %list_ptr_alloc
  %val_alloc = alloca double
  store double %1, double* %val_alloc
  %list_load = load { i32*, double* }*, { i32*, double* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, double* }, { i32*, double* }* %list_load, i32 0, i32 1
  %list_array_load = load double*, double** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, double* }, { i32*, double* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %list_arry_next_element_ptr = getelementptr double, double* %list_array_load, i32 %list_size
  %inc_size = add i32 %list_size, 1
  store i32 %inc_size, i32* %list_size_ptr
  %val = load double, double* %val_alloc
  store double %val, double* %list_arry_next_element_ptr
  ret void
}

define void @list_pushstr({ i32*, i8** }* %0, i8* %1) {
entry:
  %list_ptr_alloc = alloca { i32*, i8** }*
  store { i32*, i8** }* %0, { i32*, i8** }** %list_ptr_alloc
  %val_alloc = alloca i8*
  store i8* %1, i8** %val_alloc
  %list_load = load { i32*, i8** }*, { i32*, i8** }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i8** }, { i32*, i8** }* %list_load, i32 0, i32 1
  %list_array_load = load i8**, i8*** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i8** }, { i32*, i8** }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %list_arry_next_element_ptr = getelementptr i8*, i8** %list_array_load, i32 %list_size
  %inc_size = add i32 %list_size, 1
  store i32 %inc_size, i32* %list_size_ptr
  %val = load i8*, i8** %val_alloc
  store i8* %val, i8** %list_arry_next_element_ptr
  ret void
}

define i1 @list_popbool({ i32*, i1* }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, i1* }*
  store { i32*, i1* }* %0, { i32*, i1* }** %list_ptr_alloc
  %list_load = load { i32*, i1* }*, { i32*, i1* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i1* }, { i32*, i1* }* %list_load, i32 0, i32 1
  %list_array_load = load i1*, i1** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i1* }, { i32*, i1* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %dec_size = sub i32 %list_size, 1
  %list_arry_next_element_ptr = getelementptr i1, i1* %list_array_load, i32 %dec_size
  %list_arry_next_element = load i1, i1* %list_arry_next_element_ptr
  store i32 %dec_size, i32* %list_size_ptr
  ret i1 %list_arry_next_element
}

define i32 @list_popint({ i32*, i32* }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, i32* }*
  store { i32*, i32* }* %0, { i32*, i32* }** %list_ptr_alloc
  %list_load = load { i32*, i32* }*, { i32*, i32* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i32* }, { i32*, i32* }* %list_load, i32 0, i32 1
  %list_array_load = load i32*, i32** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i32* }, { i32*, i32* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %dec_size = sub i32 %list_size, 1
  %list_arry_next_element_ptr = getelementptr i32, i32* %list_array_load, i32 %dec_size
  %list_arry_next_element = load i32, i32* %list_arry_next_element_ptr
  store i32 %dec_size, i32* %list_size_ptr
  ret i32 %list_arry_next_element
}

define double @list_popfloat({ i32*, double* }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, double* }*
  store { i32*, double* }* %0, { i32*, double* }** %list_ptr_alloc
  %list_load = load { i32*, double* }*, { i32*, double* }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, double* }, { i32*, double* }* %list_load, i32 0, i32 1
  %list_array_load = load double*, double** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, double* }, { i32*, double* }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %dec_size = sub i32 %list_size, 1
  %list_arry_next_element_ptr = getelementptr double, double* %list_array_load, i32 %dec_size
  %list_arry_next_element = load double, double* %list_arry_next_element_ptr
  store i32 %dec_size, i32* %list_size_ptr
  ret double %list_arry_next_element
}

define i8* @list_popstr({ i32*, i8** }* %0) {
entry:
  %list_ptr_alloc = alloca { i32*, i8** }*
  store { i32*, i8** }* %0, { i32*, i8** }** %list_ptr_alloc
  %list_load = load { i32*, i8** }*, { i32*, i8** }** %list_ptr_alloc
  %list_array_ptr = getelementptr inbounds { i32*, i8** }, { i32*, i8** }* %list_load, i32 0, i32 1
  %list_array_load = load i8**, i8*** %list_array_ptr
  %list_size_ptr_ptr = getelementptr inbounds { i32*, i8** }, { i32*, i8** }* %list_load, i32 0, i32 0
  %list_size_ptr = load i32*, i32** %list_size_ptr_ptr
  %list_size = load i32, i32* %list_size_ptr
  %dec_size = sub i32 %list_size, 1
  %list_arry_next_element_ptr = getelementptr i8*, i8** %list_array_load, i32 %dec_size
  %list_arry_next_element = load i8*, i8** %list_arry_next_element_ptr
  store i32 %dec_size, i32* %list_size_ptr
  ret i8* %list_arry_next_element
}

define i32 @main() {
entry:
  %a = alloca double
  store double 3.000000e+00, double* %a
  %a1 = load double, double* %a
  %float_binop = fcmp oeq double %a1, 3.000000e+00
  br i1 %float_binop, label %then, label %else

then:                                             ; preds = %entry
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.6, i32 0, i32 0), i32 1)
  br label %end

else:                                             ; preds = %entry
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.8, i32 0, i32 0), i32 0)
  br label %end

end:                                              ; preds = %else, %then
  %b = alloca double
  store double -5.000000e+00, double* %b
  %b3 = load double, double* %b
  %float_binop4 = fcmp oeq double %b3, -5.000000e+00
  br i1 %float_binop4, label %then5, label %else7

then5:                                            ; preds = %end
  %printf6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.16, i32 0, i32 0), i32 1)
  br label %end9

else7:                                            ; preds = %end
  %printf8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.18, i32 0, i32 0), i32 0)
  br label %end9

end9:                                             ; preds = %else7, %then5
  %c = alloca double
  store double 6.660000e+01, double* %c
  %c10 = load double, double* %c
  %float_binop11 = fcmp oeq double %c10, 6.660000e+01
  br i1 %float_binop11, label %then12, label %else14

then12:                                           ; preds = %end9
  %printf13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.26, i32 0, i32 0), i32 1)
  br label %end16

else14:                                           ; preds = %end9
  %printf15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.28, i32 0, i32 0), i32 0)
  br label %end16

end16:                                            ; preds = %else14, %then12
  %d = alloca double
  store double 1.200000e+01, double* %d
  %e = alloca double
  store double 2.000000e+00, double* %e
  %d17 = load double, double* %d
  %e18 = load double, double* %e
  %float_binop19 = fdiv double %d17, %e18
  store double %float_binop19, double* %e
  %e20 = load double, double* %e
  %float_binop21 = fcmp oeq double %e20, 6.000000e+00
  br i1 %float_binop21, label %then22, label %else24

then22:                                           ; preds = %end16
  %printf23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.39, i32 0, i32 0), i32 1)
  br label %end26

else24:                                           ; preds = %end16
  %printf25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.41, i32 0, i32 0), i32 0)
  br label %end26

end26:                                            ; preds = %else24, %then22
  ret i32 0
}
